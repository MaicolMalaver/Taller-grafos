#Kruskal

from collections import defaultdict

class Graph: 
  
    def ini(self,vertices): 
        self.V= vertices
        self.graph = []

    def añaaris(self,u,v,w): 
        self.graph.append([u,v,w]) 
  
    def enco(self, padre, i): 
        if padre[i] == i: 
            return i 
        return self.find(padre, padre[i]) 
  
    def union(self, padre, rango, x, y): 
        xraiz = self.enco(padre, x) 
        yraiz = self.enco(padre, y) 

        if rango[xraiz] < rango[yraiz]: 
            padre[xraiz] = yraiz 
        elif rango[xraiz] > rango[yraiz]: 
            padre[yraiz] = xraiz 
  
        else : 
            padre[yriaz] = xraiz 
            rango[xraiz] += 1

    def Kruskal(self): 
  
        result =[]
  
        i = 0 
        e = 0 

        self.graph =  sorted(self.graph,key=lambda item: item[2]) 
  
        padre = [] ; rango = [] 
  
        for node in range(self.V): 
            padre.append(node) 
            rango.append(0) 
      
        while e < self.V -1 : 

            u,v,w =  self.graph[i] 
            i = i + 1
            x = self.enco(padre, u) 
            y = self.enco(padre, v) 
  
            if x != y: 
                e = e + 1     
                result.append([u,v,w]) 
                self.union(padre, rango, x, y)             

        print ("Aristas")
        for u,v,weight  in result: 

            print ("%d -- %d == %d" % (u,v,weight)) 
    
    g = Graph(4,4) 
    g.añaaris(0, 3, 4) 
    g.añaaris(1, 2, 7) 
    g.añaaris(6, 1, 5) 
    g.añaaris(5, 3, 15) 
    g.añaaris(2, 3, 4) 

    g.Kruskal()
    
#########################################################
#Prim

from collections import defaultdict 
import sys 
  
class Heap(): 
  
    def ini(self): 
        self.array = [] 
        self.size = 0
        self.pos = [] 
  
    def nueMinHeapNode(self, v, dist): 
        minHeapNode = [v, dist] 
        return minHeapNode 
  
    def interMinHeapNode(self, a, b): 
        t = self.array[a] 
        self.array[a] = self.array[b] 
        self.array[b] = t 
  
    def minHeapi(self, idx): 
        pequeño = idx 
        izq = 2 * idx + 1
        der = 2 * idx + 2
  
        if izq < self.size and self.array[izq][1] < \ self.array[pequeño][1]: 
            pequeño = izq
  
        if der < self.size and self.array[der][1] < \ self.array[pequeño][1]: 
            pequeño = der 
  
        if pequeño != idx: 
  
            self.pos[ self.array[pequeño][0] ] = idx 
            self.pos[ self.array[idx][0] ] = pequeño
  
            self.interMinHeapNode(pequeño, idx) 
  
            self.minHeapi(pequeño) 
  
    def extraerMin(self): 
  
        if self.vacio() == True: 
            return
  
        raiz = self.array[0] 
  
        ultiNode = self.array[self.size - 1] 
        self.array[0] = ultiNode 
  
        self.pos[ultiNode[0]] = 0
        self.pos[raiz[0]] = self.size - 1
  
        self.size -= 1
        self.minHeapi(0) 
  
        return root 
  
    def vacio(self): 
        return True if self.size == 0 else False
  
    def dismiKey(self, v, dist): 
  
        i = self.pos[v] 
  
        self.array[i][1] = dist 
  
        while i > 0 and self.array[i][1] < \ 
                    self.array[(i - 1) / 2][1]: 
  
            self.pos[ self.array[i][0] ] = (i-1)/2
            self.pos[ self.array[(i-1)/2][0] ] = i 
            self.interMinHeapNode(i, (i - 1)/2 ) 
  
            i = (i - 1) / 2; 
  
    def estaMinHeap(self, v): 
  
        if self.pos[v] < self.size: 
            return True
        return False

  
    def printArr(padre, n): 
        for i in range(1, n): 
            print "% d - % d" % (padre[i], i) 
  
  
class Graph(): 
  
    def ini(self, V): 
        self.V = V 
        self.graph = defaultdict(list) 
  
    def añaaris(self, src, dest, peso): 
  
        nueNode = [dest, peso] 
        self.graph[src].insert(0, nueNode) 
  
        nueNode = [src, peso] 
        self.graph[dest].insert(0, nueNode) 
  
    def Prim(self): 

        V = self.V   

        key = []    

        padre = []  
  
        minHeap = Heap() 
   
        for v in range(V): 
            padre.append(-1) 
            key.append(sys.maxint) 
            minHeap.array.append( minHeap.newMinHeapNode(v, key[v]) ) 
            minHeap.pos.append(v) 
  
        minHeap.pos[0] = 0
        key[0] = 0
        minHeap.decreaseKey(0, key[0]) 
  
        minHeap.size = V; 
  
        while minHeap.vacio() == False: 
  
            nueHeapNode = minHeap.extraerMin() 
            u = nueHeapNode[0] 
  
            for pCrawl in self.graph[u]: 
  
                v = pCrawl[0] 
  
                if minHeap.estaMinHeap(v) and pCrawl[1] < key[v]: 
                    key[v] = pCrawl[1] 
                    padre[v] = u 
  
                    minHeap.decreaseKey(v, key[v]) 
  
        printArr(padre, V) 
  
    graph = Graph(9) 
    graph.añaaris(0, 1, 4) 
    graph.añaaris(0, 7, 8) 
    graph.añaaris(1, 2, 8) 
    graph.añaaris(1, 7, 11) 
    graph.añaaris(2, 3, 7) 
    graph.añaaris(2, 8, 2) 
    graph.añaaris(2, 5, 4) 
    graph.añaaris(3, 4, 9) 
    graph.añaaris(3, 5, 14) 
    graph.añaaris(4, 5, 10) 
    graph.añaaris(5, 6, 2) 
    graph.añaaris(6, 7, 1) 
    graph.añaaris(6, 8, 6) 
    graph.añaaris(7, 8, 7)

    graph.Prim() 
    
###############################################################
#dijkstra

import sys 
  
class Heap(): 
  
    def ini(self): 
        self.array = [] 
        self.size = 0
        self.pos = [] 
  
    def nueMinHeapNode(self, v, dist): 
        minHeapNode = [v, dist] 
        return minHeapNode 

    def interMinHeapNode(self,a, b): 
        t = self.array[a] 
        self.array[a] = self.array[b] 
        self.array[b] = t 
  
    def minHeapify(self, idx): 
        pequeño = idx 
        izq = 2*idx + 1
        der = 2*idx + 2
  
        if izq < self.size and self.array[izq][1] \ < self.array[pequeño][1]: 
            pequeño = left
        if der < self.size and self.array[der][1] \ < self.array[pequeño][1]: 
            pequeño = der 

        if pequeño != idx: 

            self.pos[ self.array[pequeño][0] ] = idx 
            self.pos[ self.array[idx][0] ] = pequeño

            self.interMinHeapNode(pequeño, idx) 
  
            self.minHeapi(pequeño) 

    def extraerMin(self): 

        if self.vacio() == True: 
            return

        raiz = self.array[0] 

        ultiNode = self.array[self.size - 1] 
        self.array[0] = ultiNode 

        self.pos[ultiNode[0]] = 0
        self.pos[raiz[0]] = self.size - 1

        self.size -= 1
        self.minHeapi(0) 
  
        return raiz 
  
    def vacio(self): 
        return True if self.size == 0 else False
  
    def decreaseKey(self, v, dist): 
  
        i = self.pos[v] 

        self.array[i][1] = dist 

        while i > 0 and self.array[i][1] < self.array[(i - 1) / 2][1]: 

            self.pos[ self.array[i][0] ] = (i-1)/2
            self.pos[ self.array[(i-1)/2][0] ] = i 
            self.interMinHeapNode(i, (i - 1)/2 ) 

            i = (i - 1) / 2; 

    def estaMinHeap(self, v): 
  
        if self.pos[v] < self.size: 
            return True
        return False
  
  
def printArr(dist, n): 
    print ("Distancia del vertice")
    for i in range(n): 
        print ("%d\t\t%d" % (i,dist[i]))
  
  
class Graph(): 
  
    def ini(self, V): 
        self.V = V 
        self.graph = defaultdict(list) 

    def añaaris(self, src, dest, weight): 

        nueNode = [dest, peso] 
        self.graph[src].insert(0, nueNode) 

        nueNode = [src, peso] 
        self.graph[dest].insert(0, nueNode) 

    def dijkstra(self, src): 
  
        V = self.V  
        dist = []   

        minHeap = Heap() 

        for v in range(V): 
            dist.append(sys.maxint) 
            minHeap.array.append( minHeap.nueMinHeapNode(v, dist[v]) ) 
            minHeap.pos.append(v) 

        minHeap.pos[src] = src 
        dist[src] = 0
        minHeap.decreaseKey(src, dist[src]) 

        minHeap.size = V; 

        while minHeap.vacio() == False: 

            nueHeapNode = minHeap.extraerMin() 
            u = nueHeapNode[0] 

            for pCrawl in self.graph[u]: 
  
                v = pCrawl[0] 

                if minHeap.estaMinHeap(v) and dist[u] != sys.maxint and \ 
                   pCrawl[1] + dist[u] < dist[v]: 
                        dist[v] = pCrawl[1] + dist[u] 

                        minHeap.decreaseKey(v, dist[v]) 
  
        printArr(dist,V) 

    graph = Graph(9) 
    graph.añaaris(0, 1, 4) 
    graph.añaaris(0, 7, 8) 
    graph.añaaris(1, 2, 8) 
    graph.añaaris(1, 7, 11) 
    graph.añaaris(2, 3, 7) 
    graph.añaaris(2, 8, 2) 
    graph.añaaris(2, 5, 4) 
    graph.añaaris(3, 4, 9) 
    graph.añaaris(3, 5, 14) 
    graph.añaaris(4, 5, 10) 
    graph.añaaris(5, 6, 2) 
    graph.añaaris(6, 7, 1) 
    graph.añaaris(6, 8, 6) 
    graph.añaaris(7, 8, 7) 
    
    graph.dijkstra(0) 

#########################################################
#Bellman-ford

from collections import defaultdict 

class Graph: 
  
    def ini(self,vertices): 
        self.V= vertices
        self.graph = [] 
    
    def añaaris(self,u,v,w): 
        self.graph.append([u, v, w]) 

    def printArr(self, dist): 
        print("Distancia del vertice") 
        for i in range(self.V): 
            print("%d \t\t %d" % (i, dist[i])) 

    def BellmanFord(self, src): 

        dist = [float("Inf")] * self.V 
        dist[src] = 0 

        for i in range(self.V - 1): 

            for u, v, w in self.graph: 
                if dist[u] != float("Inf") and dist[u] + w < dist[v]: 
                        dist[v] = dist[u] + w 

        for u, v, w in self.graph: 
                if dist[u] != float("Inf") and dist[u] + w < dist[v]: 
                        print ("Contiene ciclos de pesos negativos")
                        return

        self.printArr(dist) 
  
    g = Graph(5)
    g.añaaris(0, 1, -1) 
    g.añaaris(0, 2, 4) 
    g.añaaris(1, 2, 3) 
    g.añaaris(1, 3, 2) 
    g.añaaris(1, 4, 2) 
    g.añaaris(3, 2, 5) 
    g.añaaris(3, 1, 1) 
    g.añaaris(4, 3, -3) 
  
    g.BellmanFord(0)
